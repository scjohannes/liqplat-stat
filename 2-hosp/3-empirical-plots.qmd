---
Title: Empirical Plots
---

## Setup
```{r}
library(arrow)
library(tidyverse)
library(data.table)
```

```{r}
set.seed(1234)
df <- read_parquet("./data/hosp_long_weeks.parquet")
```

## Create death carried forward dataset
```{r}
fu <- 26

death_dates <-
    filter(df, y == 5) |>
    select(pat_id, wdeath = week)

df <- df |> 
    left_join(death_dates, by = "pat_id")

df_state_5 <-
  df |>
  filter(y == 5) |>
  mutate(
    y = as.integer(y),
    yprev = as.integer(yprev)) |> 
  group_by(pat_id) |>
  complete(week = wdeath:fu,
           fill=list(y=5L, yprev=5L, gap=1)) |>
  arrange(pat_id, week) |>
  fill(everything())

df_state_1_to_4 <-
  df |>
  mutate(yprev = as.integer(yprev)) |>
  filter(y != 5) |>
  arrange(pat_id, week)

df_forward <-
  bind_rows(df_state_1_to_4, df_state_5) |>
  mutate(y = as.ordered(y),
         yprev = as.factor(yprev)) |>
  arrange(pat_id, week)
```

## eda figures

### Tile plot

```{r}
ids <- sample(unique(df$pat_id), 30)

df |>
  filter(pat_id %in% ids) |>
  mutate(pat_id = as.integer(factor(pat_id))) |> 
  mutate(y = as.ordered(y)) |>
  ggplot() +
  aes(y=pat_id, x=week) +
  geom_tile(mapping = aes(fill = y),
            width=1, height=0.4) +
  scale_fill_viridis_d() +
  scale_x_continuous(breaks = 1:26, limits = c(0.5, 26.5)) +
  scale_y_continuous(breaks = 1:30) +
  labs(x = "Study Week",
       y = "Participant ID",
       fill = "State")
```

### Empirical SOPs

```{r}
df_forward |>
      mutate(y = as.factor(y)) |>
      group_by(week, y, tx) |>
      count() |>
      group_by(week, tx) |>
      mutate(n = n / sum(n)) |>
      ggplot() +
      aes(x = week, y = n, fill=y) +
      geom_col(position="fill", width = 1) +
      scale_x_continuous(limits = c(0.5, 26.5),
                                breaks = 1:26) +
      scale_y_continuous(breaks = seq(0, 1, 0.25)) +
      scale_fill_viridis_d(end = 0.9) +
      coord_cartesian(ylim = c(0, 1)) +
      facet_wrap(~tx, nrow=1) +
      labs(x = "Study Week",
           y = "Cumulative Proportion",
           fill = "State")
          #  title = "(A)")
```

### SOP lines plot
```{r}
df_forward |>
  mutate(y = as.factor(y)) |>
  group_by(week, y, tx) |>
  count() |>
  group_by(week, tx) |>
  mutate(n = n / sum(n)) |>
  ggplot() +
  aes(x = week, y = n, color=y, linetype = tx) +
  geom_line(linewidth = 1) +
  geom_point(alpha=0.6, size=1.5) +
  scale_x_continuous(breaks = 1:26) +
  #scale_color_brewer(palette = "Set2") +
  scale_color_viridis_d(end = 0.9) +
  scale_y_continuous(breaks = seq(0, 1, by=0.1)) +
  coord_cartesian(ylim = c(0,1)) +
  labs(x = "Study Week",
       y = "Empirical State Occupancy Probability",
       color = "State",
       linetype = "Treatment",
       #title = "(B)")
  )
```

### Transitions

```{r}
# Create the transition data.frame for week = x
get_transitions_df <- function(df, x){
  
  
  subset <- df[df$week == x, ]
  subtable <- table(subset$y, subset$yprev, dnn = c("y", "yprev")) |> 
  as.data.table()

  subtable[, week := x]
  return(subtable)
}

# Get the transition data frame for each week and combine
# into a single data frame
df_transitions <- 
  map(2:fu, ~get_transitions_df(df_forward, .x)) |>
  rbindlist()

# Compute the proportion of transitions relative to the number of
# transitions on each week
df_transitions <-
  df_transitions |>
    mutate(total = sum(N),
           p = N / total, .by=week)

```


```{r}
FONT_SIZE <- 10
df_transitions |>
    #filter(week%%2 == 0) |> 
    mutate(yprev = as.factor(yprev), y = as.factor(y)) |>
    filter(p != 0) |>
    ggplot() +
    aes(x = yprev, y = y, size = p) +
    geom_point() +
    scale_size_area(breaks = seq(0, 1, by = 0.1), max_size = 4) +
    facet_wrap(~week,
               nrow = 5,
               scales = "free",
               labeller = labeller(week = \(x) glue::glue("week {as.integer(x)-1} to {as.integer(x)}"))) +
    scale_x_discrete(drop=FALSE) +
    scale_y_discrete(drop=FALSE) +
    theme(axis.ticks = element_blank()) +
    theme(aspect.ratio = 0.9) +
    labs(x = "Previous State",
         y = "Current State",
         size = "Proportion")
```

### Correlation Plot

Correlation plot

```{r}
# Create correlation matrix
corr <-
  df_forward |> 
    select(pat_id, week, y) |>
    arrange(week) |>
    mutate(y = as.integer(y)) |>
    pivot_wider(names_from = week, values_from = y) |>
    ungroup() |>
    select(-pat_id) |>
    cor(method="spearman", use="pairwise.complete.obs")

corr |>
  as.data.frame() |>
  rownames_to_column() |>
  pivot_longer(-rowname) |>
  mutate(rowname = as.integer(rowname), name = as.integer(name)) |>
  mutate(rowname = as.factor(rowname), name = as.factor(name)) |>
  filter(rowname != name) |>
  ggplot() + 
    aes(x=rowname, y=name, fill=value) +
    geom_tile() +
    geom_text(mapping=aes(x=rowname, y=name, label=round(value, 2)),
              color="black",
              size = 3) +
    scale_fill_viridis_c(limits=c(0,1), n.breaks = 10) +
    expand_limits(value = c(0, 1)) +
    # cowplot::theme_half_open(font_size=FONT_SIZE,
    #           font_family = "Source Sans Pro") +
    theme(plot.title = element_text(hjust = 0.5),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank()) +
    theme(axis.line = element_blank(),
          axis.ticks = element_blank()) +
    theme(legend.key.height = unit(0.8, "in")) +
    labs(x="Study week",
         y="Study week",
         fill="")

max_p <- max(df_transitions$p)

df_transitions |>
  mutate(p = round(p,2)) |>
    mutate(yprev = as.factor(yprev), y = as.factor(y)) |>
    ggplot() +
    aes(x = yprev, y = y, fill = p) +
    geom_tile() +
  geom_text(mapping=aes(x=yprev, y=y, label=p),
             color="gray",
             family = "Source Sans Pro",
             size=2) +
  scale_fill_viridis_c(limits=c(0, max_p), guide = "none") +
    facet_wrap(~week,
               nrow = 5,
               scales = "free",
               labeller = labeller(week = \(x) glue::glue("week {as.integer(x)-1} to {as.integer(x)}"))) +
    scale_x_discrete(drop=FALSE) +
    scale_y_discrete(drop=FALSE) +
    theme_bw(base_family = "Source Sans Pro",
             base_size = FONT_SIZE) +
   theme(aspect.ratio = 1) +
    labs(x = "Previous week",
         y = "Current week",
         size = "Proportion")
```